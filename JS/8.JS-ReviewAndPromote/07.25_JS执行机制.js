// 来源地址:https://web.qianguyihao.com/15-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/09-js%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%EF%BC%9A%E5%BC%82%E6%AD%A5%E5%92%8C%E5%8D%95%E7%BA%BF%E7%A8%8B.html#%E9%A2%98%E7%9B%AE%E4%BA%8C%EF%BC%9A%E5%BC%82%E6%AD%A5

// # JS的异步和单线程
// ## 题目一:异步

/* console.log(1);
setTimeout(() => {
    console.log(2);
}, 1000)
console.log(3); */

// 上面的代码很容易知道执行的结果为 1 3 2
// 现在我们把定时器的延时时间改为0

/* console.log(1);
setTimeout(() => {
    console.log(2);
}, 0);
console.log(3); */

// 结果依然是 1 3 2
// 分析-总结
// js 是单线程（同一时间只能做一件事），而且有一个任务队列：全部的「同步任务执行完毕后，再来执行异步任务」。第一行代码和最后一行代码是同步任务；但是，setTimeout是异步任务。

// ## 题目二:异步

/* console.log('A');

while (1) {

}

console.log('B'); */
// 执行结果为 A
// 由于while是同步任务 又是死循环 程序会卡在循环里面出不来 就不会向下执行输出B 只会输出A

// 如果我们把上面代码修改为这样

/* console.log('A');

setTimeout(() => {
    console.log('B');
}, 1000);

while (1) {

} */

// 执行结果仍然是A
// 因为定时器是异步任务，而while是同步任务，还是那句话：如果同步代码没有执行完毕，任务队列中的异步代码是不会执行的

// ## 题目三:同步

/* console.log('A');

alert('hi')

console.log('B'); */

// alert函数是同步任务，只有我们点击了确认，才会继续打印B

/**
 *
 * 前端使用异步的场景

    什么时候需要等待，就什么时候用异步。

    定时任务：setTimeout（定时炸弹）、setInterval（循环执行）

    网络请求：ajax请求、动态<img>加载

    事件绑定（比如说，按钮绑定点击事件之后，用户爱点不点。我们不可能卡在按钮那里，什么都不做。所以，应该用异步）

    ES6中的Promise
 */


// # 任务队列和Event Loop(事件循环)
// ## 任务队列
// 所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。
// 同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务。
// 异步任务指的是，不进入主线程、而进入"任务队列"（task queue）的任务，只有"任务队列"通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。

// 总结：只要主线程空了，就会去读取"任务队列"，这就是JavaScript的运行机制。【重要】

// ## Event Loop
// 主线程从"任务队列"中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。


// # 容易答错的题目
for (var i = 0; i < 3; i++) {
    setTimeout(() => {
        console.log(new Date(), i);
    }, 1000);
}
console.log(new Date(), i);
// console.log(i);
// 正确的答案是 3 3 3 3
/**
 *  输出
 *  2022-07-25T15:07:35.525Z 3
 *  2022-07-25T15:07:36.527Z 3
 *  2022-07-25T15:07:36.527Z 3
 *  2022-07-25T15:07:36.527Z 3
 */
// 分析：for 循环是同步任务，setTimeout是异步任务。for循环每次遍历的时候，遇到settimeout，就先暂留着，等同步任务全部执行完毕（此时，i已经等于3了），再执行异步任务。

// 如果我们约定，用箭头表示其前后的两次输出之间有 1 秒的时间间隔，而逗号表示其前后的两次输出之间的时间间隔可以忽略，代码实际运行的结果该如何描述？
// 正确答案: 3 -> 3,3,3，即第 1 个 3 直接输出，1 秒之后，连续输出 3 个 3。

// 循环执行过程中，几乎同时设置了 3 个定时器，这些定时器都会在 1 秒之后触发，而循环完的输出是立即执行的，显而易见，正确的描述是 B。


